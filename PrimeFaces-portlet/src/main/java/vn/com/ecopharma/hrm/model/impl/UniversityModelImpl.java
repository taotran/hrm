package vn.com.ecopharma.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.com.ecopharma.hrm.model.University;
import vn.com.ecopharma.hrm.model.UniversityModel;
import vn.com.ecopharma.hrm.model.UniversitySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the University service. Represents a row in the &quot;pf_University&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.model.UniversityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UniversityImpl}.
 * </p>
 *
 * @author tvt
 * @see UniversityImpl
 * @see vn.com.ecopharma.hrm.model.University
 * @see vn.com.ecopharma.hrm.model.UniversityModel
 * @generated
 */
@JSON(strict = true)
public class UniversityModelImpl extends BaseModelImpl<University>
    implements UniversityModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a university model instance should use the {@link vn.com.ecopharma.hrm.model.University} interface instead.
     */
    public static final String TABLE_NAME = "pf_University";
    public static final Object[][] TABLE_COLUMNS = {
            { "universityId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "code_", Types.VARCHAR },
            { "tel_fax", Types.VARCHAR },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table pf_University (universityId LONG not null primary key,name VARCHAR(75) null,code_ VARCHAR(75) null,tel_fax VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table pf_University";
    public static final String ORDER_BY_JPQL = " ORDER BY university.universityId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY pf_University.universityId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.vn.com.ecopharma.hrm.model.University"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.vn.com.ecopharma.hrm.model.University"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.vn.com.ecopharma.hrm.model.University"));
    private static ClassLoader _classLoader = University.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            University.class
        };
    private long _universityId;
    private String _name;
    private String _code;
    private String _tel_fax;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private University _escapedModel;

    public UniversityModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static University toModel(UniversitySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        University model = new UniversityImpl();

        model.setUniversityId(soapModel.getUniversityId());
        model.setName(soapModel.getName());
        model.setCode(soapModel.getCode());
        model.setTel_fax(soapModel.getTel_fax());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<University> toModels(UniversitySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<University> models = new ArrayList<University>(soapModels.length);

        for (UniversitySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _universityId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setUniversityId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _universityId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return University.class;
    }

    @Override
    public String getModelClassName() {
        return University.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("universityId", getUniversityId());
        attributes.put("name", getName());
        attributes.put("code", getCode());
        attributes.put("tel_fax", getTel_fax());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long universityId = (Long) attributes.get("universityId");

        if (universityId != null) {
            setUniversityId(universityId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String code = (String) attributes.get("code");

        if (code != null) {
            setCode(code);
        }

        String tel_fax = (String) attributes.get("tel_fax");

        if (tel_fax != null) {
            setTel_fax(tel_fax);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @JSON
    @Override
    public long getUniversityId() {
        return _universityId;
    }

    @Override
    public void setUniversityId(long universityId) {
        _universityId = universityId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getCode() {
        if (_code == null) {
            return StringPool.BLANK;
        } else {
            return _code;
        }
    }

    @Override
    public void setCode(String code) {
        _code = code;
    }

    @JSON
    @Override
    public String getTel_fax() {
        if (_tel_fax == null) {
            return StringPool.BLANK;
        } else {
            return _tel_fax;
        }
    }

    @Override
    public void setTel_fax(String tel_fax) {
        _tel_fax = tel_fax;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            University.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public University toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (University) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        UniversityImpl universityImpl = new UniversityImpl();

        universityImpl.setUniversityId(getUniversityId());
        universityImpl.setName(getName());
        universityImpl.setCode(getCode());
        universityImpl.setTel_fax(getTel_fax());
        universityImpl.setGroupId(getGroupId());
        universityImpl.setCompanyId(getCompanyId());
        universityImpl.setUserId(getUserId());
        universityImpl.setCreateDate(getCreateDate());
        universityImpl.setModifiedDate(getModifiedDate());

        universityImpl.resetOriginalValues();

        return universityImpl;
    }

    @Override
    public int compareTo(University university) {
        long primaryKey = university.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof University)) {
            return false;
        }

        University university = (University) obj;

        long primaryKey = university.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<University> toCacheModel() {
        UniversityCacheModel universityCacheModel = new UniversityCacheModel();

        universityCacheModel.universityId = getUniversityId();

        universityCacheModel.name = getName();

        String name = universityCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            universityCacheModel.name = null;
        }

        universityCacheModel.code = getCode();

        String code = universityCacheModel.code;

        if ((code != null) && (code.length() == 0)) {
            universityCacheModel.code = null;
        }

        universityCacheModel.tel_fax = getTel_fax();

        String tel_fax = universityCacheModel.tel_fax;

        if ((tel_fax != null) && (tel_fax.length() == 0)) {
            universityCacheModel.tel_fax = null;
        }

        universityCacheModel.groupId = getGroupId();

        universityCacheModel.companyId = getCompanyId();

        universityCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            universityCacheModel.createDate = createDate.getTime();
        } else {
            universityCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            universityCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            universityCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return universityCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{universityId=");
        sb.append(getUniversityId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", code=");
        sb.append(getCode());
        sb.append(", tel_fax=");
        sb.append(getTel_fax());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("vn.com.ecopharma.hrm.model.University");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>universityId</column-name><column-value><![CDATA[");
        sb.append(getUniversityId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>code</column-name><column-value><![CDATA[");
        sb.append(getCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tel_fax</column-name><column-value><![CDATA[");
        sb.append(getTel_fax());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
