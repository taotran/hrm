package vn.com.ecopharma.hrm.model.impl;

import com.liferay.portal.NoSuchModelException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.trash.TrashHandler;
import com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.ContainerModel;
import com.liferay.portal.model.TrashedModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import com.liferay.portlet.trash.model.TrashEntry;
import com.liferay.portlet.trash.service.TrashEntryLocalServiceUtil;

import vn.com.ecopharma.hrm.model.FileAttachment;
import vn.com.ecopharma.hrm.model.FileAttachmentModel;
import vn.com.ecopharma.hrm.model.FileAttachmentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FileAttachment service. Represents a row in the &quot;HRM_FileAttachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.model.FileAttachmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FileAttachmentImpl}.
 * </p>
 *
 * @author tvt
 * @see FileAttachmentImpl
 * @see vn.com.ecopharma.hrm.model.FileAttachment
 * @see vn.com.ecopharma.hrm.model.FileAttachmentModel
 * @generated
 */
@JSON(strict = true)
public class FileAttachmentModelImpl extends BaseModelImpl<FileAttachment>
    implements FileAttachmentModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a file attachment model instance should use the {@link vn.com.ecopharma.hrm.model.FileAttachment} interface instead.
     */
    public static final String TABLE_NAME = "HRM_FileAttachment";
    public static final Object[][] TABLE_COLUMNS = {
            { "f_id", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "c_id", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "file_type", Types.VARCHAR },
            { "size_", Types.BIGINT },
            { "content", Types.VARCHAR },
            { "attachment_type", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table HRM_FileAttachment (f_id LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,c_id LONG,name VARCHAR(75) null,file_type VARCHAR(75) null,size_ LONG,content VARCHAR(75) null,attachment_type VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table HRM_FileAttachment";
    public static final String ORDER_BY_JPQL = " ORDER BY fileAttachment.f_id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY HRM_FileAttachment.f_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.vn.com.ecopharma.hrm.model.FileAttachment"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.vn.com.ecopharma.hrm.model.FileAttachment"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.vn.com.ecopharma.hrm.model.FileAttachment"));
    private static ClassLoader _classLoader = FileAttachment.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            FileAttachment.class
        };
    private long _f_id;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private long _c_id;
    private String _name;
    private String _file_type;
    private long _size;
    private String _content;
    private String _attachment_type;
    private FileAttachment _escapedModel;

    public FileAttachmentModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static FileAttachment toModel(FileAttachmentSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        FileAttachment model = new FileAttachmentImpl();

        model.setF_id(soapModel.getF_id());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setC_id(soapModel.getC_id());
        model.setName(soapModel.getName());
        model.setFile_type(soapModel.getFile_type());
        model.setSize(soapModel.getSize());
        model.setContent(soapModel.getContent());
        model.setAttachment_type(soapModel.getAttachment_type());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<FileAttachment> toModels(FileAttachmentSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<FileAttachment> models = new ArrayList<FileAttachment>(soapModels.length);

        for (FileAttachmentSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _f_id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setF_id(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _f_id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return FileAttachment.class;
    }

    @Override
    public String getModelClassName() {
        return FileAttachment.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("f_id", getF_id());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("c_id", getC_id());
        attributes.put("name", getName());
        attributes.put("file_type", getFile_type());
        attributes.put("size", getSize());
        attributes.put("content", getContent());
        attributes.put("attachment_type", getAttachment_type());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long f_id = (Long) attributes.get("f_id");

        if (f_id != null) {
            setF_id(f_id);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Long c_id = (Long) attributes.get("c_id");

        if (c_id != null) {
            setC_id(c_id);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String file_type = (String) attributes.get("file_type");

        if (file_type != null) {
            setFile_type(file_type);
        }

        Long size = (Long) attributes.get("size");

        if (size != null) {
            setSize(size);
        }

        String content = (String) attributes.get("content");

        if (content != null) {
            setContent(content);
        }

        String attachment_type = (String) attributes.get("attachment_type");

        if (attachment_type != null) {
            setAttachment_type(attachment_type);
        }
    }

    @JSON
    @Override
    public long getF_id() {
        return _f_id;
    }

    @Override
    public void setF_id(long f_id) {
        _f_id = f_id;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public long getC_id() {
        return _c_id;
    }

    @Override
    public void setC_id(long c_id) {
        _c_id = c_id;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getFile_type() {
        if (_file_type == null) {
            return StringPool.BLANK;
        } else {
            return _file_type;
        }
    }

    @Override
    public void setFile_type(String file_type) {
        _file_type = file_type;
    }

    @JSON
    @Override
    public long getSize() {
        return _size;
    }

    @Override
    public void setSize(long size) {
        _size = size;
    }

    @JSON
    @Override
    public String getContent() {
        if (_content == null) {
            return StringPool.BLANK;
        } else {
            return _content;
        }
    }

    @Override
    public void setContent(String content) {
        _content = content;
    }

    @JSON
    @Override
    public String getAttachment_type() {
        if (_attachment_type == null) {
            return StringPool.BLANK;
        } else {
            return _attachment_type;
        }
    }

    @Override
    public void setAttachment_type(String attachment_type) {
        _attachment_type = attachment_type;
    }

    @Override
    public int getStatus() {
        return 0;
    }

    @Override
    public TrashEntry getTrashEntry() throws PortalException, SystemException {
        if (!isInTrash()) {
            return null;
        }

        TrashEntry trashEntry = TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
                getTrashEntryClassPK());

        if (trashEntry != null) {
            return trashEntry;
        }

        TrashHandler trashHandler = getTrashHandler();

        if (!Validator.isNull(trashHandler.getContainerModelClassName())) {
            ContainerModel containerModel = null;

            try {
                containerModel = trashHandler.getParentContainerModel(this);
            } catch (NoSuchModelException nsme) {
                return null;
            }

            while (containerModel != null) {
                if (containerModel instanceof TrashedModel) {
                    TrashedModel trashedModel = (TrashedModel) containerModel;

                    return trashedModel.getTrashEntry();
                }

                trashHandler = TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName());

                if (trashHandler == null) {
                    return null;
                }

                containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
            }
        }

        return null;
    }

    @Override
    public long getTrashEntryClassPK() {
        return getPrimaryKey();
    }

    @Override
    public TrashHandler getTrashHandler() {
        return TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
    }

    @Override
    public boolean isInTrash() {
        if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isInTrashContainer() {
        TrashHandler trashHandler = getTrashHandler();

        if ((trashHandler == null) ||
                Validator.isNull(trashHandler.getContainerModelClassName())) {
            return false;
        }

        try {
            ContainerModel containerModel = trashHandler.getParentContainerModel(this);

            if (containerModel == null) {
                return false;
            }

            if (containerModel instanceof TrashedModel) {
                return ((TrashedModel) containerModel).isInTrash();
            }
        } catch (Exception e) {
        }

        return false;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            FileAttachment.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public FileAttachment toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (FileAttachment) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FileAttachmentImpl fileAttachmentImpl = new FileAttachmentImpl();

        fileAttachmentImpl.setF_id(getF_id());
        fileAttachmentImpl.setGroupId(getGroupId());
        fileAttachmentImpl.setCompanyId(getCompanyId());
        fileAttachmentImpl.setUserId(getUserId());
        fileAttachmentImpl.setCreateDate(getCreateDate());
        fileAttachmentImpl.setModifiedDate(getModifiedDate());
        fileAttachmentImpl.setC_id(getC_id());
        fileAttachmentImpl.setName(getName());
        fileAttachmentImpl.setFile_type(getFile_type());
        fileAttachmentImpl.setSize(getSize());
        fileAttachmentImpl.setContent(getContent());
        fileAttachmentImpl.setAttachment_type(getAttachment_type());

        fileAttachmentImpl.resetOriginalValues();

        return fileAttachmentImpl;
    }

    @Override
    public int compareTo(FileAttachment fileAttachment) {
        long primaryKey = fileAttachment.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof FileAttachment)) {
            return false;
        }

        FileAttachment fileAttachment = (FileAttachment) obj;

        long primaryKey = fileAttachment.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<FileAttachment> toCacheModel() {
        FileAttachmentCacheModel fileAttachmentCacheModel = new FileAttachmentCacheModel();

        fileAttachmentCacheModel.f_id = getF_id();

        fileAttachmentCacheModel.groupId = getGroupId();

        fileAttachmentCacheModel.companyId = getCompanyId();

        fileAttachmentCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            fileAttachmentCacheModel.createDate = createDate.getTime();
        } else {
            fileAttachmentCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            fileAttachmentCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            fileAttachmentCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        fileAttachmentCacheModel.c_id = getC_id();

        fileAttachmentCacheModel.name = getName();

        String name = fileAttachmentCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            fileAttachmentCacheModel.name = null;
        }

        fileAttachmentCacheModel.file_type = getFile_type();

        String file_type = fileAttachmentCacheModel.file_type;

        if ((file_type != null) && (file_type.length() == 0)) {
            fileAttachmentCacheModel.file_type = null;
        }

        fileAttachmentCacheModel.size = getSize();

        fileAttachmentCacheModel.content = getContent();

        String content = fileAttachmentCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            fileAttachmentCacheModel.content = null;
        }

        fileAttachmentCacheModel.attachment_type = getAttachment_type();

        String attachment_type = fileAttachmentCacheModel.attachment_type;

        if ((attachment_type != null) && (attachment_type.length() == 0)) {
            fileAttachmentCacheModel.attachment_type = null;
        }

        return fileAttachmentCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{f_id=");
        sb.append(getF_id());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", c_id=");
        sb.append(getC_id());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", file_type=");
        sb.append(getFile_type());
        sb.append(", size=");
        sb.append(getSize());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", attachment_type=");
        sb.append(getAttachment_type());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("vn.com.ecopharma.hrm.model.FileAttachment");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>f_id</column-name><column-value><![CDATA[");
        sb.append(getF_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>c_id</column-name><column-value><![CDATA[");
        sb.append(getC_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>file_type</column-name><column-value><![CDATA[");
        sb.append(getFile_type());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>size</column-name><column-value><![CDATA[");
        sb.append(getSize());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>attachment_type</column-name><column-value><![CDATA[");
        sb.append(getAttachment_type());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
