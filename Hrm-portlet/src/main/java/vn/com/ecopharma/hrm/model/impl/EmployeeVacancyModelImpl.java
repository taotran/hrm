package vn.com.ecopharma.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.com.ecopharma.hrm.model.EmployeeVacancy;
import vn.com.ecopharma.hrm.model.EmployeeVacancyModel;
import vn.com.ecopharma.hrm.model.EmployeeVacancySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmployeeVacancy service. Represents a row in the &quot;HRM_Recruitment_EmployeeVacancy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.model.EmployeeVacancyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeVacancyImpl}.
 * </p>
 *
 * @author tvt
 * @see EmployeeVacancyImpl
 * @see vn.com.ecopharma.hrm.model.EmployeeVacancy
 * @see vn.com.ecopharma.hrm.model.EmployeeVacancyModel
 * @generated
 */
@JSON(strict = true)
public class EmployeeVacancyModelImpl extends BaseModelImpl<EmployeeVacancy>
    implements EmployeeVacancyModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee vacancy model instance should use the {@link vn.com.ecopharma.hrm.model.EmployeeVacancy} interface instead.
     */
    public static final String TABLE_NAME = "HRM_Recruitment_EmployeeVacancy";
    public static final Object[][] TABLE_COLUMNS = {
            { "employeeVacancyId", Types.BIGINT },
            { "employeeId", Types.BIGINT },
            { "v_id", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table HRM_Recruitment_EmployeeVacancy (employeeVacancyId LONG not null primary key,employeeId LONG,v_id LONG,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table HRM_Recruitment_EmployeeVacancy";
    public static final String ORDER_BY_JPQL = " ORDER BY employeeVacancy.employeeVacancyId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY HRM_Recruitment_EmployeeVacancy.employeeVacancyId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.vn.com.ecopharma.hrm.model.EmployeeVacancy"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.vn.com.ecopharma.hrm.model.EmployeeVacancy"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.vn.com.ecopharma.hrm.model.EmployeeVacancy"),
            true);
    public static long EMPLOYEEID_COLUMN_BITMASK = 1L;
    public static long V_ID_COLUMN_BITMASK = 2L;
    public static long EMPLOYEEVACANCYID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.vn.com.ecopharma.hrm.model.EmployeeVacancy"));
    private static ClassLoader _classLoader = EmployeeVacancy.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EmployeeVacancy.class
        };
    private long _employeeVacancyId;
    private long _employeeId;
    private long _originalEmployeeId;
    private boolean _setOriginalEmployeeId;
    private long _v_id;
    private long _originalV_id;
    private boolean _setOriginalV_id;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private EmployeeVacancy _escapedModel;

    public EmployeeVacancyModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EmployeeVacancy toModel(EmployeeVacancySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EmployeeVacancy model = new EmployeeVacancyImpl();

        model.setEmployeeVacancyId(soapModel.getEmployeeVacancyId());
        model.setEmployeeId(soapModel.getEmployeeId());
        model.setV_id(soapModel.getV_id());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EmployeeVacancy> toModels(
        EmployeeVacancySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EmployeeVacancy> models = new ArrayList<EmployeeVacancy>(soapModels.length);

        for (EmployeeVacancySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _employeeVacancyId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEmployeeVacancyId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _employeeVacancyId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EmployeeVacancy.class;
    }

    @Override
    public String getModelClassName() {
        return EmployeeVacancy.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("employeeVacancyId", getEmployeeVacancyId());
        attributes.put("employeeId", getEmployeeId());
        attributes.put("v_id", getV_id());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long employeeVacancyId = (Long) attributes.get("employeeVacancyId");

        if (employeeVacancyId != null) {
            setEmployeeVacancyId(employeeVacancyId);
        }

        Long employeeId = (Long) attributes.get("employeeId");

        if (employeeId != null) {
            setEmployeeId(employeeId);
        }

        Long v_id = (Long) attributes.get("v_id");

        if (v_id != null) {
            setV_id(v_id);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @JSON
    @Override
    public long getEmployeeVacancyId() {
        return _employeeVacancyId;
    }

    @Override
    public void setEmployeeVacancyId(long employeeVacancyId) {
        _employeeVacancyId = employeeVacancyId;
    }

    @JSON
    @Override
    public long getEmployeeId() {
        return _employeeId;
    }

    @Override
    public void setEmployeeId(long employeeId) {
        _columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

        if (!_setOriginalEmployeeId) {
            _setOriginalEmployeeId = true;

            _originalEmployeeId = _employeeId;
        }

        _employeeId = employeeId;
    }

    public long getOriginalEmployeeId() {
        return _originalEmployeeId;
    }

    @JSON
    @Override
    public long getV_id() {
        return _v_id;
    }

    @Override
    public void setV_id(long v_id) {
        _columnBitmask |= V_ID_COLUMN_BITMASK;

        if (!_setOriginalV_id) {
            _setOriginalV_id = true;

            _originalV_id = _v_id;
        }

        _v_id = v_id;
    }

    public long getOriginalV_id() {
        return _originalV_id;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            EmployeeVacancy.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public EmployeeVacancy toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EmployeeVacancy) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeVacancyImpl employeeVacancyImpl = new EmployeeVacancyImpl();

        employeeVacancyImpl.setEmployeeVacancyId(getEmployeeVacancyId());
        employeeVacancyImpl.setEmployeeId(getEmployeeId());
        employeeVacancyImpl.setV_id(getV_id());
        employeeVacancyImpl.setGroupId(getGroupId());
        employeeVacancyImpl.setCompanyId(getCompanyId());
        employeeVacancyImpl.setUserId(getUserId());
        employeeVacancyImpl.setCreateDate(getCreateDate());
        employeeVacancyImpl.setModifiedDate(getModifiedDate());

        employeeVacancyImpl.resetOriginalValues();

        return employeeVacancyImpl;
    }

    @Override
    public int compareTo(EmployeeVacancy employeeVacancy) {
        long primaryKey = employeeVacancy.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EmployeeVacancy)) {
            return false;
        }

        EmployeeVacancy employeeVacancy = (EmployeeVacancy) obj;

        long primaryKey = employeeVacancy.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EmployeeVacancyModelImpl employeeVacancyModelImpl = this;

        employeeVacancyModelImpl._originalEmployeeId = employeeVacancyModelImpl._employeeId;

        employeeVacancyModelImpl._setOriginalEmployeeId = false;

        employeeVacancyModelImpl._originalV_id = employeeVacancyModelImpl._v_id;

        employeeVacancyModelImpl._setOriginalV_id = false;

        employeeVacancyModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EmployeeVacancy> toCacheModel() {
        EmployeeVacancyCacheModel employeeVacancyCacheModel = new EmployeeVacancyCacheModel();

        employeeVacancyCacheModel.employeeVacancyId = getEmployeeVacancyId();

        employeeVacancyCacheModel.employeeId = getEmployeeId();

        employeeVacancyCacheModel.v_id = getV_id();

        employeeVacancyCacheModel.groupId = getGroupId();

        employeeVacancyCacheModel.companyId = getCompanyId();

        employeeVacancyCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            employeeVacancyCacheModel.createDate = createDate.getTime();
        } else {
            employeeVacancyCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            employeeVacancyCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            employeeVacancyCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return employeeVacancyCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{employeeVacancyId=");
        sb.append(getEmployeeVacancyId());
        sb.append(", employeeId=");
        sb.append(getEmployeeId());
        sb.append(", v_id=");
        sb.append(getV_id());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("vn.com.ecopharma.hrm.model.EmployeeVacancy");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>employeeVacancyId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeVacancyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>v_id</column-name><column-value><![CDATA[");
        sb.append(getV_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
