package vn.com.ecopharma.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.com.ecopharma.hrm.model.CandidateHistory;
import vn.com.ecopharma.hrm.model.CandidateHistoryModel;
import vn.com.ecopharma.hrm.model.CandidateHistorySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CandidateHistory service. Represents a row in the &quot;HRM_Recruitment_CandidateHistory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.model.CandidateHistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidateHistoryImpl}.
 * </p>
 *
 * @author tvt
 * @see CandidateHistoryImpl
 * @see vn.com.ecopharma.hrm.model.CandidateHistory
 * @see vn.com.ecopharma.hrm.model.CandidateHistoryModel
 * @generated
 */
@JSON(strict = true)
public class CandidateHistoryModelImpl extends BaseModelImpl<CandidateHistory>
    implements CandidateHistoryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a candidate history model instance should use the {@link vn.com.ecopharma.hrm.model.CandidateHistory} interface instead.
     */
    public static final String TABLE_NAME = "HRM_Recruitment_CandidateHistory";
    public static final Object[][] TABLE_COLUMNS = {
            { "candidateHistoryId", Types.BIGINT },
            { "c_id", Types.BIGINT },
            { "v_id", Types.BIGINT },
            { "interviewId", Types.BIGINT },
            { "performed_by", Types.BIGINT },
            { "performedDate", Types.TIMESTAMP },
            { "note", Types.VARCHAR },
            { "interviewers", Types.VARCHAR },
            { "action", Types.VARCHAR },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table HRM_Recruitment_CandidateHistory (candidateHistoryId LONG not null primary key,c_id LONG,v_id LONG,interviewId LONG,performed_by LONG,performedDate DATE null,note VARCHAR(75) null,interviewers VARCHAR(75) null,action VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table HRM_Recruitment_CandidateHistory";
    public static final String ORDER_BY_JPQL = " ORDER BY candidateHistory.candidateHistoryId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY HRM_Recruitment_CandidateHistory.candidateHistoryId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.vn.com.ecopharma.hrm.model.CandidateHistory"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.vn.com.ecopharma.hrm.model.CandidateHistory"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.vn.com.ecopharma.hrm.model.CandidateHistory"),
            true);
    public static long C_ID_COLUMN_BITMASK = 1L;
    public static long CANDIDATEHISTORYID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.vn.com.ecopharma.hrm.model.CandidateHistory"));
    private static ClassLoader _classLoader = CandidateHistory.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CandidateHistory.class
        };
    private long _candidateHistoryId;
    private long _c_id;
    private long _originalC_id;
    private boolean _setOriginalC_id;
    private long _v_id;
    private long _interviewId;
    private long _performed_by;
    private Date _performedDate;
    private String _note;
    private String _interviewers;
    private String _action;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private long _columnBitmask;
    private CandidateHistory _escapedModel;

    public CandidateHistoryModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static CandidateHistory toModel(CandidateHistorySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        CandidateHistory model = new CandidateHistoryImpl();

        model.setCandidateHistoryId(soapModel.getCandidateHistoryId());
        model.setC_id(soapModel.getC_id());
        model.setV_id(soapModel.getV_id());
        model.setInterviewId(soapModel.getInterviewId());
        model.setPerformed_by(soapModel.getPerformed_by());
        model.setPerformedDate(soapModel.getPerformedDate());
        model.setNote(soapModel.getNote());
        model.setInterviewers(soapModel.getInterviewers());
        model.setAction(soapModel.getAction());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<CandidateHistory> toModels(
        CandidateHistorySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<CandidateHistory> models = new ArrayList<CandidateHistory>(soapModels.length);

        for (CandidateHistorySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _candidateHistoryId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setCandidateHistoryId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _candidateHistoryId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return CandidateHistory.class;
    }

    @Override
    public String getModelClassName() {
        return CandidateHistory.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("candidateHistoryId", getCandidateHistoryId());
        attributes.put("c_id", getC_id());
        attributes.put("v_id", getV_id());
        attributes.put("interviewId", getInterviewId());
        attributes.put("performed_by", getPerformed_by());
        attributes.put("performedDate", getPerformedDate());
        attributes.put("note", getNote());
        attributes.put("interviewers", getInterviewers());
        attributes.put("action", getAction());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long candidateHistoryId = (Long) attributes.get("candidateHistoryId");

        if (candidateHistoryId != null) {
            setCandidateHistoryId(candidateHistoryId);
        }

        Long c_id = (Long) attributes.get("c_id");

        if (c_id != null) {
            setC_id(c_id);
        }

        Long v_id = (Long) attributes.get("v_id");

        if (v_id != null) {
            setV_id(v_id);
        }

        Long interviewId = (Long) attributes.get("interviewId");

        if (interviewId != null) {
            setInterviewId(interviewId);
        }

        Long performed_by = (Long) attributes.get("performed_by");

        if (performed_by != null) {
            setPerformed_by(performed_by);
        }

        Date performedDate = (Date) attributes.get("performedDate");

        if (performedDate != null) {
            setPerformedDate(performedDate);
        }

        String note = (String) attributes.get("note");

        if (note != null) {
            setNote(note);
        }

        String interviewers = (String) attributes.get("interviewers");

        if (interviewers != null) {
            setInterviewers(interviewers);
        }

        String action = (String) attributes.get("action");

        if (action != null) {
            setAction(action);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }
    }

    @JSON
    @Override
    public long getCandidateHistoryId() {
        return _candidateHistoryId;
    }

    @Override
    public void setCandidateHistoryId(long candidateHistoryId) {
        _candidateHistoryId = candidateHistoryId;
    }

    @JSON
    @Override
    public long getC_id() {
        return _c_id;
    }

    @Override
    public void setC_id(long c_id) {
        _columnBitmask |= C_ID_COLUMN_BITMASK;

        if (!_setOriginalC_id) {
            _setOriginalC_id = true;

            _originalC_id = _c_id;
        }

        _c_id = c_id;
    }

    public long getOriginalC_id() {
        return _originalC_id;
    }

    @JSON
    @Override
    public long getV_id() {
        return _v_id;
    }

    @Override
    public void setV_id(long v_id) {
        _v_id = v_id;
    }

    @JSON
    @Override
    public long getInterviewId() {
        return _interviewId;
    }

    @Override
    public void setInterviewId(long interviewId) {
        _interviewId = interviewId;
    }

    @JSON
    @Override
    public long getPerformed_by() {
        return _performed_by;
    }

    @Override
    public void setPerformed_by(long performed_by) {
        _performed_by = performed_by;
    }

    @JSON
    @Override
    public Date getPerformedDate() {
        return _performedDate;
    }

    @Override
    public void setPerformedDate(Date performedDate) {
        _performedDate = performedDate;
    }

    @JSON
    @Override
    public String getNote() {
        if (_note == null) {
            return StringPool.BLANK;
        } else {
            return _note;
        }
    }

    @Override
    public void setNote(String note) {
        _note = note;
    }

    @JSON
    @Override
    public String getInterviewers() {
        if (_interviewers == null) {
            return StringPool.BLANK;
        } else {
            return _interviewers;
        }
    }

    @Override
    public void setInterviewers(String interviewers) {
        _interviewers = interviewers;
    }

    @JSON
    @Override
    public String getAction() {
        if (_action == null) {
            return StringPool.BLANK;
        } else {
            return _action;
        }
    }

    @Override
    public void setAction(String action) {
        _action = action;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            CandidateHistory.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public CandidateHistory toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CandidateHistory) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CandidateHistoryImpl candidateHistoryImpl = new CandidateHistoryImpl();

        candidateHistoryImpl.setCandidateHistoryId(getCandidateHistoryId());
        candidateHistoryImpl.setC_id(getC_id());
        candidateHistoryImpl.setV_id(getV_id());
        candidateHistoryImpl.setInterviewId(getInterviewId());
        candidateHistoryImpl.setPerformed_by(getPerformed_by());
        candidateHistoryImpl.setPerformedDate(getPerformedDate());
        candidateHistoryImpl.setNote(getNote());
        candidateHistoryImpl.setInterviewers(getInterviewers());
        candidateHistoryImpl.setAction(getAction());
        candidateHistoryImpl.setGroupId(getGroupId());
        candidateHistoryImpl.setCompanyId(getCompanyId());
        candidateHistoryImpl.setUserId(getUserId());
        candidateHistoryImpl.setUserName(getUserName());

        candidateHistoryImpl.resetOriginalValues();

        return candidateHistoryImpl;
    }

    @Override
    public int compareTo(CandidateHistory candidateHistory) {
        long primaryKey = candidateHistory.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CandidateHistory)) {
            return false;
        }

        CandidateHistory candidateHistory = (CandidateHistory) obj;

        long primaryKey = candidateHistory.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        CandidateHistoryModelImpl candidateHistoryModelImpl = this;

        candidateHistoryModelImpl._originalC_id = candidateHistoryModelImpl._c_id;

        candidateHistoryModelImpl._setOriginalC_id = false;

        candidateHistoryModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<CandidateHistory> toCacheModel() {
        CandidateHistoryCacheModel candidateHistoryCacheModel = new CandidateHistoryCacheModel();

        candidateHistoryCacheModel.candidateHistoryId = getCandidateHistoryId();

        candidateHistoryCacheModel.c_id = getC_id();

        candidateHistoryCacheModel.v_id = getV_id();

        candidateHistoryCacheModel.interviewId = getInterviewId();

        candidateHistoryCacheModel.performed_by = getPerformed_by();

        Date performedDate = getPerformedDate();

        if (performedDate != null) {
            candidateHistoryCacheModel.performedDate = performedDate.getTime();
        } else {
            candidateHistoryCacheModel.performedDate = Long.MIN_VALUE;
        }

        candidateHistoryCacheModel.note = getNote();

        String note = candidateHistoryCacheModel.note;

        if ((note != null) && (note.length() == 0)) {
            candidateHistoryCacheModel.note = null;
        }

        candidateHistoryCacheModel.interviewers = getInterviewers();

        String interviewers = candidateHistoryCacheModel.interviewers;

        if ((interviewers != null) && (interviewers.length() == 0)) {
            candidateHistoryCacheModel.interviewers = null;
        }

        candidateHistoryCacheModel.action = getAction();

        String action = candidateHistoryCacheModel.action;

        if ((action != null) && (action.length() == 0)) {
            candidateHistoryCacheModel.action = null;
        }

        candidateHistoryCacheModel.groupId = getGroupId();

        candidateHistoryCacheModel.companyId = getCompanyId();

        candidateHistoryCacheModel.userId = getUserId();

        candidateHistoryCacheModel.userName = getUserName();

        String userName = candidateHistoryCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            candidateHistoryCacheModel.userName = null;
        }

        return candidateHistoryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{candidateHistoryId=");
        sb.append(getCandidateHistoryId());
        sb.append(", c_id=");
        sb.append(getC_id());
        sb.append(", v_id=");
        sb.append(getV_id());
        sb.append(", interviewId=");
        sb.append(getInterviewId());
        sb.append(", performed_by=");
        sb.append(getPerformed_by());
        sb.append(", performedDate=");
        sb.append(getPerformedDate());
        sb.append(", note=");
        sb.append(getNote());
        sb.append(", interviewers=");
        sb.append(getInterviewers());
        sb.append(", action=");
        sb.append(getAction());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("vn.com.ecopharma.hrm.model.CandidateHistory");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>candidateHistoryId</column-name><column-value><![CDATA[");
        sb.append(getCandidateHistoryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>c_id</column-name><column-value><![CDATA[");
        sb.append(getC_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>v_id</column-name><column-value><![CDATA[");
        sb.append(getV_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>interviewId</column-name><column-value><![CDATA[");
        sb.append(getInterviewId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>performed_by</column-name><column-value><![CDATA[");
        sb.append(getPerformed_by());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>performedDate</column-name><column-value><![CDATA[");
        sb.append(getPerformedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>note</column-name><column-value><![CDATA[");
        sb.append(getNote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>interviewers</column-name><column-value><![CDATA[");
        sb.append(getInterviewers());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>action</column-name><column-value><![CDATA[");
        sb.append(getAction());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
