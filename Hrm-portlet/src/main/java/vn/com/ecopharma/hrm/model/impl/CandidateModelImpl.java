package vn.com.ecopharma.hrm.model.impl;

import com.liferay.portal.NoSuchModelException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.trash.TrashHandler;
import com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.ContainerModel;
import com.liferay.portal.model.TrashedModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import com.liferay.portlet.trash.model.TrashEntry;
import com.liferay.portlet.trash.service.TrashEntryLocalServiceUtil;

import vn.com.ecopharma.hrm.model.Candidate;
import vn.com.ecopharma.hrm.model.CandidateModel;
import vn.com.ecopharma.hrm.model.CandidateSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Candidate service. Represents a row in the &quot;HRM_Candidate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.model.CandidateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidateImpl}.
 * </p>
 *
 * @author tvt
 * @see CandidateImpl
 * @see vn.com.ecopharma.hrm.model.Candidate
 * @see vn.com.ecopharma.hrm.model.CandidateModel
 * @generated
 */
@JSON(strict = true)
public class CandidateModelImpl extends BaseModelImpl<Candidate>
    implements CandidateModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a candidate model instance should use the {@link vn.com.ecopharma.hrm.model.Candidate} interface instead.
     */
    public static final String TABLE_NAME = "HRM_Candidate";
    public static final Object[][] TABLE_COLUMNS = {
            { "c_id", Types.BIGINT },
            { "first_name", Types.VARCHAR },
            { "middle_name", Types.VARCHAR },
            { "last_name", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "contact_number", Types.VARCHAR },
            { "comment_", Types.VARCHAR },
            { "mode_of_application", Types.INTEGER },
            { "date_of_application", Types.TIMESTAMP },
            { "cv_file_id", Types.BIGINT },
            { "cv_text_version", Types.VARCHAR },
            { "keywords", Types.VARCHAR },
            { "added_person", Types.INTEGER },
            { "user_id", Types.BIGINT },
            { "group_id", Types.BIGINT },
            { "interviewId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table HRM_Candidate (c_id LONG not null primary key,first_name VARCHAR(75) null,middle_name VARCHAR(75) null,last_name VARCHAR(75) null,email VARCHAR(75) null,contact_number VARCHAR(75) null,comment_ VARCHAR(75) null,mode_of_application INTEGER,date_of_application DATE null,cv_file_id LONG,cv_text_version VARCHAR(75) null,keywords VARCHAR(75) null,added_person INTEGER,user_id LONG,group_id LONG,interviewId LONG)";
    public static final String TABLE_SQL_DROP = "drop table HRM_Candidate";
    public static final String ORDER_BY_JPQL = " ORDER BY candidate.c_id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY HRM_Candidate.c_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.vn.com.ecopharma.hrm.model.Candidate"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.vn.com.ecopharma.hrm.model.Candidate"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.vn.com.ecopharma.hrm.model.Candidate"),
            true);
    public static long C_ID_COLUMN_BITMASK = 1L;
    public static long EMAIL_COLUMN_BITMASK = 2L;
    public static long FIRST_NAME_COLUMN_BITMASK = 4L;
    public static long LAST_NAME_COLUMN_BITMASK = 8L;
    public static long MIDDLE_NAME_COLUMN_BITMASK = 16L;
    public static final String MAPPING_TABLE_HRM_VACANCIES_CANDIDATES_NAME = "HRM_Vacancies_Candidates";
    public static final Object[][] MAPPING_TABLE_HRM_VACANCIES_CANDIDATES_COLUMNS =
        {
            { "c_id", Types.BIGINT },
            { "v_id", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_HRM_VACANCIES_CANDIDATES_SQL_CREATE =
        "create table HRM_Vacancies_Candidates (c_id LONG not null,v_id LONG not null,primary key (c_id, v_id))";
    public static final boolean FINDER_CACHE_ENABLED_HRM_VACANCIES_CANDIDATES = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.HRM_Vacancies_Candidates"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.vn.com.ecopharma.hrm.model.Candidate"));
    private static ClassLoader _classLoader = Candidate.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Candidate.class
        };
    private long _c_id;
    private long _originalC_id;
    private boolean _setOriginalC_id;
    private String _first_name;
    private String _originalFirst_name;
    private String _middle_name;
    private String _originalMiddle_name;
    private String _last_name;
    private String _originalLast_name;
    private String _email;
    private String _originalEmail;
    private String _contact_number;
    private String _comment;
    private int _mode_of_application;
    private Date _date_of_application;
    private long _cv_file_id;
    private String _cv_text_version;
    private String _keywords;
    private int _added_person;
    private long _user_id;
    private long _group_id;
    private long _interviewId;
    private long _columnBitmask;
    private Candidate _escapedModel;

    public CandidateModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Candidate toModel(CandidateSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Candidate model = new CandidateImpl();

        model.setC_id(soapModel.getC_id());
        model.setFirst_name(soapModel.getFirst_name());
        model.setMiddle_name(soapModel.getMiddle_name());
        model.setLast_name(soapModel.getLast_name());
        model.setEmail(soapModel.getEmail());
        model.setContact_number(soapModel.getContact_number());
        model.setComment(soapModel.getComment());
        model.setMode_of_application(soapModel.getMode_of_application());
        model.setDate_of_application(soapModel.getDate_of_application());
        model.setCv_file_id(soapModel.getCv_file_id());
        model.setCv_text_version(soapModel.getCv_text_version());
        model.setKeywords(soapModel.getKeywords());
        model.setAdded_person(soapModel.getAdded_person());
        model.setUser_id(soapModel.getUser_id());
        model.setGroup_id(soapModel.getGroup_id());
        model.setInterviewId(soapModel.getInterviewId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Candidate> toModels(CandidateSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Candidate> models = new ArrayList<Candidate>(soapModels.length);

        for (CandidateSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _c_id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setC_id(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _c_id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Candidate.class;
    }

    @Override
    public String getModelClassName() {
        return Candidate.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("c_id", getC_id());
        attributes.put("first_name", getFirst_name());
        attributes.put("middle_name", getMiddle_name());
        attributes.put("last_name", getLast_name());
        attributes.put("email", getEmail());
        attributes.put("contact_number", getContact_number());
        attributes.put("comment", getComment());
        attributes.put("mode_of_application", getMode_of_application());
        attributes.put("date_of_application", getDate_of_application());
        attributes.put("cv_file_id", getCv_file_id());
        attributes.put("cv_text_version", getCv_text_version());
        attributes.put("keywords", getKeywords());
        attributes.put("added_person", getAdded_person());
        attributes.put("user_id", getUser_id());
        attributes.put("group_id", getGroup_id());
        attributes.put("interviewId", getInterviewId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long c_id = (Long) attributes.get("c_id");

        if (c_id != null) {
            setC_id(c_id);
        }

        String first_name = (String) attributes.get("first_name");

        if (first_name != null) {
            setFirst_name(first_name);
        }

        String middle_name = (String) attributes.get("middle_name");

        if (middle_name != null) {
            setMiddle_name(middle_name);
        }

        String last_name = (String) attributes.get("last_name");

        if (last_name != null) {
            setLast_name(last_name);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String contact_number = (String) attributes.get("contact_number");

        if (contact_number != null) {
            setContact_number(contact_number);
        }

        String comment = (String) attributes.get("comment");

        if (comment != null) {
            setComment(comment);
        }

        Integer mode_of_application = (Integer) attributes.get(
                "mode_of_application");

        if (mode_of_application != null) {
            setMode_of_application(mode_of_application);
        }

        Date date_of_application = (Date) attributes.get("date_of_application");

        if (date_of_application != null) {
            setDate_of_application(date_of_application);
        }

        Long cv_file_id = (Long) attributes.get("cv_file_id");

        if (cv_file_id != null) {
            setCv_file_id(cv_file_id);
        }

        String cv_text_version = (String) attributes.get("cv_text_version");

        if (cv_text_version != null) {
            setCv_text_version(cv_text_version);
        }

        String keywords = (String) attributes.get("keywords");

        if (keywords != null) {
            setKeywords(keywords);
        }

        Integer added_person = (Integer) attributes.get("added_person");

        if (added_person != null) {
            setAdded_person(added_person);
        }

        Long user_id = (Long) attributes.get("user_id");

        if (user_id != null) {
            setUser_id(user_id);
        }

        Long group_id = (Long) attributes.get("group_id");

        if (group_id != null) {
            setGroup_id(group_id);
        }

        Long interviewId = (Long) attributes.get("interviewId");

        if (interviewId != null) {
            setInterviewId(interviewId);
        }
    }

    @JSON
    @Override
    public long getC_id() {
        return _c_id;
    }

    @Override
    public void setC_id(long c_id) {
        _columnBitmask |= C_ID_COLUMN_BITMASK;

        if (!_setOriginalC_id) {
            _setOriginalC_id = true;

            _originalC_id = _c_id;
        }

        _c_id = c_id;
    }

    public long getOriginalC_id() {
        return _originalC_id;
    }

    @JSON
    @Override
    public String getFirst_name() {
        if (_first_name == null) {
            return StringPool.BLANK;
        } else {
            return _first_name;
        }
    }

    @Override
    public void setFirst_name(String first_name) {
        _columnBitmask |= FIRST_NAME_COLUMN_BITMASK;

        if (_originalFirst_name == null) {
            _originalFirst_name = _first_name;
        }

        _first_name = first_name;
    }

    public String getOriginalFirst_name() {
        return GetterUtil.getString(_originalFirst_name);
    }

    @JSON
    @Override
    public String getMiddle_name() {
        if (_middle_name == null) {
            return StringPool.BLANK;
        } else {
            return _middle_name;
        }
    }

    @Override
    public void setMiddle_name(String middle_name) {
        _columnBitmask |= MIDDLE_NAME_COLUMN_BITMASK;

        if (_originalMiddle_name == null) {
            _originalMiddle_name = _middle_name;
        }

        _middle_name = middle_name;
    }

    public String getOriginalMiddle_name() {
        return GetterUtil.getString(_originalMiddle_name);
    }

    @JSON
    @Override
    public String getLast_name() {
        if (_last_name == null) {
            return StringPool.BLANK;
        } else {
            return _last_name;
        }
    }

    @Override
    public void setLast_name(String last_name) {
        _columnBitmask |= LAST_NAME_COLUMN_BITMASK;

        if (_originalLast_name == null) {
            _originalLast_name = _last_name;
        }

        _last_name = last_name;
    }

    public String getOriginalLast_name() {
        return GetterUtil.getString(_originalLast_name);
    }

    @JSON
    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _columnBitmask |= EMAIL_COLUMN_BITMASK;

        if (_originalEmail == null) {
            _originalEmail = _email;
        }

        _email = email;
    }

    public String getOriginalEmail() {
        return GetterUtil.getString(_originalEmail);
    }

    @JSON
    @Override
    public String getContact_number() {
        if (_contact_number == null) {
            return StringPool.BLANK;
        } else {
            return _contact_number;
        }
    }

    @Override
    public void setContact_number(String contact_number) {
        _contact_number = contact_number;
    }

    @JSON
    @Override
    public String getComment() {
        if (_comment == null) {
            return StringPool.BLANK;
        } else {
            return _comment;
        }
    }

    @Override
    public void setComment(String comment) {
        _comment = comment;
    }

    @JSON
    @Override
    public int getMode_of_application() {
        return _mode_of_application;
    }

    @Override
    public void setMode_of_application(int mode_of_application) {
        _mode_of_application = mode_of_application;
    }

    @JSON
    @Override
    public Date getDate_of_application() {
        return _date_of_application;
    }

    @Override
    public void setDate_of_application(Date date_of_application) {
        _date_of_application = date_of_application;
    }

    @JSON
    @Override
    public long getCv_file_id() {
        return _cv_file_id;
    }

    @Override
    public void setCv_file_id(long cv_file_id) {
        _cv_file_id = cv_file_id;
    }

    @JSON
    @Override
    public String getCv_text_version() {
        if (_cv_text_version == null) {
            return StringPool.BLANK;
        } else {
            return _cv_text_version;
        }
    }

    @Override
    public void setCv_text_version(String cv_text_version) {
        _cv_text_version = cv_text_version;
    }

    @JSON
    @Override
    public String getKeywords() {
        if (_keywords == null) {
            return StringPool.BLANK;
        } else {
            return _keywords;
        }
    }

    @Override
    public void setKeywords(String keywords) {
        _keywords = keywords;
    }

    @JSON
    @Override
    public int getAdded_person() {
        return _added_person;
    }

    @Override
    public void setAdded_person(int added_person) {
        _added_person = added_person;
    }

    @JSON
    @Override
    public long getUser_id() {
        return _user_id;
    }

    @Override
    public void setUser_id(long user_id) {
        _user_id = user_id;
    }

    @JSON
    @Override
    public long getGroup_id() {
        return _group_id;
    }

    @Override
    public void setGroup_id(long group_id) {
        _group_id = group_id;
    }

    @JSON
    @Override
    public long getInterviewId() {
        return _interviewId;
    }

    @Override
    public void setInterviewId(long interviewId) {
        _interviewId = interviewId;
    }

    @Override
    public int getStatus() {
        return 0;
    }

    @Override
    public TrashEntry getTrashEntry() throws PortalException, SystemException {
        if (!isInTrash()) {
            return null;
        }

        TrashEntry trashEntry = TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
                getTrashEntryClassPK());

        if (trashEntry != null) {
            return trashEntry;
        }

        TrashHandler trashHandler = getTrashHandler();

        if (!Validator.isNull(trashHandler.getContainerModelClassName())) {
            ContainerModel containerModel = null;

            try {
                containerModel = trashHandler.getParentContainerModel(this);
            } catch (NoSuchModelException nsme) {
                return null;
            }

            while (containerModel != null) {
                if (containerModel instanceof TrashedModel) {
                    TrashedModel trashedModel = (TrashedModel) containerModel;

                    return trashedModel.getTrashEntry();
                }

                trashHandler = TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName());

                if (trashHandler == null) {
                    return null;
                }

                containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
            }
        }

        return null;
    }

    @Override
    public long getTrashEntryClassPK() {
        return getPrimaryKey();
    }

    @Override
    public TrashHandler getTrashHandler() {
        return TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
    }

    @Override
    public boolean isInTrash() {
        if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isInTrashContainer() {
        TrashHandler trashHandler = getTrashHandler();

        if ((trashHandler == null) ||
                Validator.isNull(trashHandler.getContainerModelClassName())) {
            return false;
        }

        try {
            ContainerModel containerModel = trashHandler.getParentContainerModel(this);

            if (containerModel == null) {
                return false;
            }

            if (containerModel instanceof TrashedModel) {
                return ((TrashedModel) containerModel).isInTrash();
            }
        } catch (Exception e) {
        }

        return false;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Candidate.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Candidate toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Candidate) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CandidateImpl candidateImpl = new CandidateImpl();

        candidateImpl.setC_id(getC_id());
        candidateImpl.setFirst_name(getFirst_name());
        candidateImpl.setMiddle_name(getMiddle_name());
        candidateImpl.setLast_name(getLast_name());
        candidateImpl.setEmail(getEmail());
        candidateImpl.setContact_number(getContact_number());
        candidateImpl.setComment(getComment());
        candidateImpl.setMode_of_application(getMode_of_application());
        candidateImpl.setDate_of_application(getDate_of_application());
        candidateImpl.setCv_file_id(getCv_file_id());
        candidateImpl.setCv_text_version(getCv_text_version());
        candidateImpl.setKeywords(getKeywords());
        candidateImpl.setAdded_person(getAdded_person());
        candidateImpl.setUser_id(getUser_id());
        candidateImpl.setGroup_id(getGroup_id());
        candidateImpl.setInterviewId(getInterviewId());

        candidateImpl.resetOriginalValues();

        return candidateImpl;
    }

    @Override
    public int compareTo(Candidate candidate) {
        long primaryKey = candidate.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Candidate)) {
            return false;
        }

        Candidate candidate = (Candidate) obj;

        long primaryKey = candidate.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        CandidateModelImpl candidateModelImpl = this;

        candidateModelImpl._originalC_id = candidateModelImpl._c_id;

        candidateModelImpl._setOriginalC_id = false;

        candidateModelImpl._originalFirst_name = candidateModelImpl._first_name;

        candidateModelImpl._originalMiddle_name = candidateModelImpl._middle_name;

        candidateModelImpl._originalLast_name = candidateModelImpl._last_name;

        candidateModelImpl._originalEmail = candidateModelImpl._email;

        candidateModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Candidate> toCacheModel() {
        CandidateCacheModel candidateCacheModel = new CandidateCacheModel();

        candidateCacheModel.c_id = getC_id();

        candidateCacheModel.first_name = getFirst_name();

        String first_name = candidateCacheModel.first_name;

        if ((first_name != null) && (first_name.length() == 0)) {
            candidateCacheModel.first_name = null;
        }

        candidateCacheModel.middle_name = getMiddle_name();

        String middle_name = candidateCacheModel.middle_name;

        if ((middle_name != null) && (middle_name.length() == 0)) {
            candidateCacheModel.middle_name = null;
        }

        candidateCacheModel.last_name = getLast_name();

        String last_name = candidateCacheModel.last_name;

        if ((last_name != null) && (last_name.length() == 0)) {
            candidateCacheModel.last_name = null;
        }

        candidateCacheModel.email = getEmail();

        String email = candidateCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            candidateCacheModel.email = null;
        }

        candidateCacheModel.contact_number = getContact_number();

        String contact_number = candidateCacheModel.contact_number;

        if ((contact_number != null) && (contact_number.length() == 0)) {
            candidateCacheModel.contact_number = null;
        }

        candidateCacheModel.comment = getComment();

        String comment = candidateCacheModel.comment;

        if ((comment != null) && (comment.length() == 0)) {
            candidateCacheModel.comment = null;
        }

        candidateCacheModel.mode_of_application = getMode_of_application();

        Date date_of_application = getDate_of_application();

        if (date_of_application != null) {
            candidateCacheModel.date_of_application = date_of_application.getTime();
        } else {
            candidateCacheModel.date_of_application = Long.MIN_VALUE;
        }

        candidateCacheModel.cv_file_id = getCv_file_id();

        candidateCacheModel.cv_text_version = getCv_text_version();

        String cv_text_version = candidateCacheModel.cv_text_version;

        if ((cv_text_version != null) && (cv_text_version.length() == 0)) {
            candidateCacheModel.cv_text_version = null;
        }

        candidateCacheModel.keywords = getKeywords();

        String keywords = candidateCacheModel.keywords;

        if ((keywords != null) && (keywords.length() == 0)) {
            candidateCacheModel.keywords = null;
        }

        candidateCacheModel.added_person = getAdded_person();

        candidateCacheModel.user_id = getUser_id();

        candidateCacheModel.group_id = getGroup_id();

        candidateCacheModel.interviewId = getInterviewId();

        return candidateCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(33);

        sb.append("{c_id=");
        sb.append(getC_id());
        sb.append(", first_name=");
        sb.append(getFirst_name());
        sb.append(", middle_name=");
        sb.append(getMiddle_name());
        sb.append(", last_name=");
        sb.append(getLast_name());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", contact_number=");
        sb.append(getContact_number());
        sb.append(", comment=");
        sb.append(getComment());
        sb.append(", mode_of_application=");
        sb.append(getMode_of_application());
        sb.append(", date_of_application=");
        sb.append(getDate_of_application());
        sb.append(", cv_file_id=");
        sb.append(getCv_file_id());
        sb.append(", cv_text_version=");
        sb.append(getCv_text_version());
        sb.append(", keywords=");
        sb.append(getKeywords());
        sb.append(", added_person=");
        sb.append(getAdded_person());
        sb.append(", user_id=");
        sb.append(getUser_id());
        sb.append(", group_id=");
        sb.append(getGroup_id());
        sb.append(", interviewId=");
        sb.append(getInterviewId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(52);

        sb.append("<model><model-name>");
        sb.append("vn.com.ecopharma.hrm.model.Candidate");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>c_id</column-name><column-value><![CDATA[");
        sb.append(getC_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>first_name</column-name><column-value><![CDATA[");
        sb.append(getFirst_name());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>middle_name</column-name><column-value><![CDATA[");
        sb.append(getMiddle_name());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>last_name</column-name><column-value><![CDATA[");
        sb.append(getLast_name());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contact_number</column-name><column-value><![CDATA[");
        sb.append(getContact_number());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comment</column-name><column-value><![CDATA[");
        sb.append(getComment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mode_of_application</column-name><column-value><![CDATA[");
        sb.append(getMode_of_application());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>date_of_application</column-name><column-value><![CDATA[");
        sb.append(getDate_of_application());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cv_file_id</column-name><column-value><![CDATA[");
        sb.append(getCv_file_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cv_text_version</column-name><column-value><![CDATA[");
        sb.append(getCv_text_version());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>keywords</column-name><column-value><![CDATA[");
        sb.append(getKeywords());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>added_person</column-name><column-value><![CDATA[");
        sb.append(getAdded_person());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>user_id</column-name><column-value><![CDATA[");
        sb.append(getUser_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>group_id</column-name><column-value><![CDATA[");
        sb.append(getGroup_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>interviewId</column-name><column-value><![CDATA[");
        sb.append(getInterviewId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
