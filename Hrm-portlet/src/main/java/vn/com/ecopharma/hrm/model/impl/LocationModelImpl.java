package vn.com.ecopharma.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.com.ecopharma.hrm.model.Location;
import vn.com.ecopharma.hrm.model.LocationModel;
import vn.com.ecopharma.hrm.model.LocationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Location service. Represents a row in the &quot;HRM_Recruitment_Location&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.model.LocationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocationImpl}.
 * </p>
 *
 * @author tvt
 * @see LocationImpl
 * @see vn.com.ecopharma.hrm.model.Location
 * @see vn.com.ecopharma.hrm.model.LocationModel
 * @generated
 */
@JSON(strict = true)
public class LocationModelImpl extends BaseModelImpl<Location>
    implements LocationModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a location model instance should use the {@link vn.com.ecopharma.hrm.model.Location} interface instead.
     */
    public static final String TABLE_NAME = "HRM_Recruitment_Location";
    public static final Object[][] TABLE_COLUMNS = {
            { "locationId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "type_", Types.VARCHAR },
            { "name", Types.VARCHAR },
            { "country_code", Types.VARCHAR },
            { "province", Types.VARCHAR },
            { "city", Types.VARCHAR },
            { "address", Types.VARCHAR },
            { "zip_code", Types.VARCHAR },
            { "phone", Types.VARCHAR },
            { "fax", Types.VARCHAR },
            { "note", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table HRM_Recruitment_Location (locationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,type_ VARCHAR(75) null,name VARCHAR(75) null,country_code VARCHAR(75) null,province VARCHAR(75) null,city VARCHAR(75) null,address VARCHAR(75) null,zip_code VARCHAR(75) null,phone VARCHAR(75) null,fax VARCHAR(75) null,note VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table HRM_Recruitment_Location";
    public static final String ORDER_BY_JPQL = " ORDER BY location.locationId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY HRM_Recruitment_Location.locationId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.vn.com.ecopharma.hrm.model.Location"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.vn.com.ecopharma.hrm.model.Location"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.vn.com.ecopharma.hrm.model.Location"));
    private static ClassLoader _classLoader = Location.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Location.class
        };
    private long _locationId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private String _type;
    private String _name;
    private String _country_code;
    private String _province;
    private String _city;
    private String _address;
    private String _zip_code;
    private String _phone;
    private String _fax;
    private String _note;
    private Location _escapedModel;

    public LocationModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Location toModel(LocationSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Location model = new LocationImpl();

        model.setLocationId(soapModel.getLocationId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setType(soapModel.getType());
        model.setName(soapModel.getName());
        model.setCountry_code(soapModel.getCountry_code());
        model.setProvince(soapModel.getProvince());
        model.setCity(soapModel.getCity());
        model.setAddress(soapModel.getAddress());
        model.setZip_code(soapModel.getZip_code());
        model.setPhone(soapModel.getPhone());
        model.setFax(soapModel.getFax());
        model.setNote(soapModel.getNote());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Location> toModels(LocationSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Location> models = new ArrayList<Location>(soapModels.length);

        for (LocationSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _locationId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setLocationId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _locationId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Location.class;
    }

    @Override
    public String getModelClassName() {
        return Location.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("locationId", getLocationId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("type", getType());
        attributes.put("name", getName());
        attributes.put("country_code", getCountry_code());
        attributes.put("province", getProvince());
        attributes.put("city", getCity());
        attributes.put("address", getAddress());
        attributes.put("zip_code", getZip_code());
        attributes.put("phone", getPhone());
        attributes.put("fax", getFax());
        attributes.put("note", getNote());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long locationId = (Long) attributes.get("locationId");

        if (locationId != null) {
            setLocationId(locationId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String type = (String) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String country_code = (String) attributes.get("country_code");

        if (country_code != null) {
            setCountry_code(country_code);
        }

        String province = (String) attributes.get("province");

        if (province != null) {
            setProvince(province);
        }

        String city = (String) attributes.get("city");

        if (city != null) {
            setCity(city);
        }

        String address = (String) attributes.get("address");

        if (address != null) {
            setAddress(address);
        }

        String zip_code = (String) attributes.get("zip_code");

        if (zip_code != null) {
            setZip_code(zip_code);
        }

        String phone = (String) attributes.get("phone");

        if (phone != null) {
            setPhone(phone);
        }

        String fax = (String) attributes.get("fax");

        if (fax != null) {
            setFax(fax);
        }

        String note = (String) attributes.get("note");

        if (note != null) {
            setNote(note);
        }
    }

    @JSON
    @Override
    public long getLocationId() {
        return _locationId;
    }

    @Override
    public void setLocationId(long locationId) {
        _locationId = locationId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getType() {
        if (_type == null) {
            return StringPool.BLANK;
        } else {
            return _type;
        }
    }

    @Override
    public void setType(String type) {
        _type = type;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getCountry_code() {
        if (_country_code == null) {
            return StringPool.BLANK;
        } else {
            return _country_code;
        }
    }

    @Override
    public void setCountry_code(String country_code) {
        _country_code = country_code;
    }

    @JSON
    @Override
    public String getProvince() {
        if (_province == null) {
            return StringPool.BLANK;
        } else {
            return _province;
        }
    }

    @Override
    public void setProvince(String province) {
        _province = province;
    }

    @JSON
    @Override
    public String getCity() {
        if (_city == null) {
            return StringPool.BLANK;
        } else {
            return _city;
        }
    }

    @Override
    public void setCity(String city) {
        _city = city;
    }

    @JSON
    @Override
    public String getAddress() {
        if (_address == null) {
            return StringPool.BLANK;
        } else {
            return _address;
        }
    }

    @Override
    public void setAddress(String address) {
        _address = address;
    }

    @JSON
    @Override
    public String getZip_code() {
        if (_zip_code == null) {
            return StringPool.BLANK;
        } else {
            return _zip_code;
        }
    }

    @Override
    public void setZip_code(String zip_code) {
        _zip_code = zip_code;
    }

    @JSON
    @Override
    public String getPhone() {
        if (_phone == null) {
            return StringPool.BLANK;
        } else {
            return _phone;
        }
    }

    @Override
    public void setPhone(String phone) {
        _phone = phone;
    }

    @JSON
    @Override
    public String getFax() {
        if (_fax == null) {
            return StringPool.BLANK;
        } else {
            return _fax;
        }
    }

    @Override
    public void setFax(String fax) {
        _fax = fax;
    }

    @JSON
    @Override
    public String getNote() {
        if (_note == null) {
            return StringPool.BLANK;
        } else {
            return _note;
        }
    }

    @Override
    public void setNote(String note) {
        _note = note;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Location.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Location toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Location) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LocationImpl locationImpl = new LocationImpl();

        locationImpl.setLocationId(getLocationId());
        locationImpl.setGroupId(getGroupId());
        locationImpl.setCompanyId(getCompanyId());
        locationImpl.setUserId(getUserId());
        locationImpl.setCreateDate(getCreateDate());
        locationImpl.setModifiedDate(getModifiedDate());
        locationImpl.setType(getType());
        locationImpl.setName(getName());
        locationImpl.setCountry_code(getCountry_code());
        locationImpl.setProvince(getProvince());
        locationImpl.setCity(getCity());
        locationImpl.setAddress(getAddress());
        locationImpl.setZip_code(getZip_code());
        locationImpl.setPhone(getPhone());
        locationImpl.setFax(getFax());
        locationImpl.setNote(getNote());

        locationImpl.resetOriginalValues();

        return locationImpl;
    }

    @Override
    public int compareTo(Location location) {
        long primaryKey = location.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Location)) {
            return false;
        }

        Location location = (Location) obj;

        long primaryKey = location.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Location> toCacheModel() {
        LocationCacheModel locationCacheModel = new LocationCacheModel();

        locationCacheModel.locationId = getLocationId();

        locationCacheModel.groupId = getGroupId();

        locationCacheModel.companyId = getCompanyId();

        locationCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            locationCacheModel.createDate = createDate.getTime();
        } else {
            locationCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            locationCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            locationCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        locationCacheModel.type = getType();

        String type = locationCacheModel.type;

        if ((type != null) && (type.length() == 0)) {
            locationCacheModel.type = null;
        }

        locationCacheModel.name = getName();

        String name = locationCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            locationCacheModel.name = null;
        }

        locationCacheModel.country_code = getCountry_code();

        String country_code = locationCacheModel.country_code;

        if ((country_code != null) && (country_code.length() == 0)) {
            locationCacheModel.country_code = null;
        }

        locationCacheModel.province = getProvince();

        String province = locationCacheModel.province;

        if ((province != null) && (province.length() == 0)) {
            locationCacheModel.province = null;
        }

        locationCacheModel.city = getCity();

        String city = locationCacheModel.city;

        if ((city != null) && (city.length() == 0)) {
            locationCacheModel.city = null;
        }

        locationCacheModel.address = getAddress();

        String address = locationCacheModel.address;

        if ((address != null) && (address.length() == 0)) {
            locationCacheModel.address = null;
        }

        locationCacheModel.zip_code = getZip_code();

        String zip_code = locationCacheModel.zip_code;

        if ((zip_code != null) && (zip_code.length() == 0)) {
            locationCacheModel.zip_code = null;
        }

        locationCacheModel.phone = getPhone();

        String phone = locationCacheModel.phone;

        if ((phone != null) && (phone.length() == 0)) {
            locationCacheModel.phone = null;
        }

        locationCacheModel.fax = getFax();

        String fax = locationCacheModel.fax;

        if ((fax != null) && (fax.length() == 0)) {
            locationCacheModel.fax = null;
        }

        locationCacheModel.note = getNote();

        String note = locationCacheModel.note;

        if ((note != null) && (note.length() == 0)) {
            locationCacheModel.note = null;
        }

        return locationCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(33);

        sb.append("{locationId=");
        sb.append(getLocationId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", country_code=");
        sb.append(getCountry_code());
        sb.append(", province=");
        sb.append(getProvince());
        sb.append(", city=");
        sb.append(getCity());
        sb.append(", address=");
        sb.append(getAddress());
        sb.append(", zip_code=");
        sb.append(getZip_code());
        sb.append(", phone=");
        sb.append(getPhone());
        sb.append(", fax=");
        sb.append(getFax());
        sb.append(", note=");
        sb.append(getNote());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(52);

        sb.append("<model><model-name>");
        sb.append("vn.com.ecopharma.hrm.model.Location");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>locationId</column-name><column-value><![CDATA[");
        sb.append(getLocationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country_code</column-name><column-value><![CDATA[");
        sb.append(getCountry_code());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>province</column-name><column-value><![CDATA[");
        sb.append(getProvince());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>city</column-name><column-value><![CDATA[");
        sb.append(getCity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>address</column-name><column-value><![CDATA[");
        sb.append(getAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>zip_code</column-name><column-value><![CDATA[");
        sb.append(getZip_code());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>phone</column-name><column-value><![CDATA[");
        sb.append(getPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fax</column-name><column-value><![CDATA[");
        sb.append(getFax());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>note</column-name><column-value><![CDATA[");
        sb.append(getNote());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
