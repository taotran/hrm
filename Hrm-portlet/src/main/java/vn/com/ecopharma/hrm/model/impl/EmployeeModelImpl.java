package vn.com.ecopharma.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.com.ecopharma.hrm.model.Employee;
import vn.com.ecopharma.hrm.model.EmployeeModel;
import vn.com.ecopharma.hrm.model.EmployeeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;HRM_Recruitment_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author tvt
 * @see EmployeeImpl
 * @see vn.com.ecopharma.hrm.model.Employee
 * @see vn.com.ecopharma.hrm.model.EmployeeModel
 * @generated
 */
@JSON(strict = true)
public class EmployeeModelImpl extends BaseModelImpl<Employee>
    implements EmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link vn.com.ecopharma.hrm.model.Employee} interface instead.
     */
    public static final String TABLE_NAME = "HRM_Recruitment_Employee";
    public static final Object[][] TABLE_COLUMNS = {
            { "employeeId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "emp_code", Types.VARCHAR },
            { "firstname", Types.VARCHAR },
            { "middle_name", Types.VARCHAR },
            { "lastname", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "nickname", Types.VARCHAR },
            { "birthday", Types.TIMESTAMP },
            { "gender", Types.VARCHAR },
            { "marital_status", Types.VARCHAR },
            { "status", Types.VARCHAR },
            { "jobtitleId", Types.BIGINT },
            { "joined_date", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table HRM_Recruitment_Employee (employeeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,emp_code VARCHAR(75) null,firstname VARCHAR(75) null,middle_name VARCHAR(75) null,lastname VARCHAR(75) null,email VARCHAR(75) null,nickname VARCHAR(75) null,birthday DATE null,gender VARCHAR(75) null,marital_status VARCHAR(75) null,status VARCHAR(75) null,jobtitleId LONG,joined_date DATE null)";
    public static final String TABLE_SQL_DROP = "drop table HRM_Recruitment_Employee";
    public static final String ORDER_BY_JPQL = " ORDER BY employee.employeeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY HRM_Recruitment_Employee.employeeId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.vn.com.ecopharma.hrm.model.Employee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.vn.com.ecopharma.hrm.model.Employee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.vn.com.ecopharma.hrm.model.Employee"));
    private static ClassLoader _classLoader = Employee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Employee.class
        };
    private long _employeeId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _emp_code;
    private String _firstname;
    private String _middle_name;
    private String _lastname;
    private String _email;
    private String _nickname;
    private Date _birthday;
    private String _gender;
    private String _marital_status;
    private String _status;
    private long _jobtitleId;
    private Date _joined_date;
    private Employee _escapedModel;

    public EmployeeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Employee toModel(EmployeeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Employee model = new EmployeeImpl();

        model.setEmployeeId(soapModel.getEmployeeId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setEmp_code(soapModel.getEmp_code());
        model.setFirstname(soapModel.getFirstname());
        model.setMiddle_name(soapModel.getMiddle_name());
        model.setLastname(soapModel.getLastname());
        model.setEmail(soapModel.getEmail());
        model.setNickname(soapModel.getNickname());
        model.setBirthday(soapModel.getBirthday());
        model.setGender(soapModel.getGender());
        model.setMarital_status(soapModel.getMarital_status());
        model.setStatus(soapModel.getStatus());
        model.setJobtitleId(soapModel.getJobtitleId());
        model.setJoined_date(soapModel.getJoined_date());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Employee> toModels(EmployeeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Employee> models = new ArrayList<Employee>(soapModels.length);

        for (EmployeeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEmployeeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Employee.class;
    }

    @Override
    public String getModelClassName() {
        return Employee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("employeeId", getEmployeeId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("emp_code", getEmp_code());
        attributes.put("firstname", getFirstname());
        attributes.put("middle_name", getMiddle_name());
        attributes.put("lastname", getLastname());
        attributes.put("email", getEmail());
        attributes.put("nickname", getNickname());
        attributes.put("birthday", getBirthday());
        attributes.put("gender", getGender());
        attributes.put("marital_status", getMarital_status());
        attributes.put("status", getStatus());
        attributes.put("jobtitleId", getJobtitleId());
        attributes.put("joined_date", getJoined_date());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long employeeId = (Long) attributes.get("employeeId");

        if (employeeId != null) {
            setEmployeeId(employeeId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String emp_code = (String) attributes.get("emp_code");

        if (emp_code != null) {
            setEmp_code(emp_code);
        }

        String firstname = (String) attributes.get("firstname");

        if (firstname != null) {
            setFirstname(firstname);
        }

        String middle_name = (String) attributes.get("middle_name");

        if (middle_name != null) {
            setMiddle_name(middle_name);
        }

        String lastname = (String) attributes.get("lastname");

        if (lastname != null) {
            setLastname(lastname);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String nickname = (String) attributes.get("nickname");

        if (nickname != null) {
            setNickname(nickname);
        }

        Date birthday = (Date) attributes.get("birthday");

        if (birthday != null) {
            setBirthday(birthday);
        }

        String gender = (String) attributes.get("gender");

        if (gender != null) {
            setGender(gender);
        }

        String marital_status = (String) attributes.get("marital_status");

        if (marital_status != null) {
            setMarital_status(marital_status);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Long jobtitleId = (Long) attributes.get("jobtitleId");

        if (jobtitleId != null) {
            setJobtitleId(jobtitleId);
        }

        Date joined_date = (Date) attributes.get("joined_date");

        if (joined_date != null) {
            setJoined_date(joined_date);
        }
    }

    @JSON
    @Override
    public long getEmployeeId() {
        return _employeeId;
    }

    @Override
    public void setEmployeeId(long employeeId) {
        _employeeId = employeeId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getEmp_code() {
        if (_emp_code == null) {
            return StringPool.BLANK;
        } else {
            return _emp_code;
        }
    }

    @Override
    public void setEmp_code(String emp_code) {
        _emp_code = emp_code;
    }

    @JSON
    @Override
    public String getFirstname() {
        if (_firstname == null) {
            return StringPool.BLANK;
        } else {
            return _firstname;
        }
    }

    @Override
    public void setFirstname(String firstname) {
        _firstname = firstname;
    }

    @JSON
    @Override
    public String getMiddle_name() {
        if (_middle_name == null) {
            return StringPool.BLANK;
        } else {
            return _middle_name;
        }
    }

    @Override
    public void setMiddle_name(String middle_name) {
        _middle_name = middle_name;
    }

    @JSON
    @Override
    public String getLastname() {
        if (_lastname == null) {
            return StringPool.BLANK;
        } else {
            return _lastname;
        }
    }

    @Override
    public void setLastname(String lastname) {
        _lastname = lastname;
    }

    @JSON
    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _email = email;
    }

    @JSON
    @Override
    public String getNickname() {
        if (_nickname == null) {
            return StringPool.BLANK;
        } else {
            return _nickname;
        }
    }

    @Override
    public void setNickname(String nickname) {
        _nickname = nickname;
    }

    @JSON
    @Override
    public Date getBirthday() {
        return _birthday;
    }

    @Override
    public void setBirthday(Date birthday) {
        _birthday = birthday;
    }

    @JSON
    @Override
    public String getGender() {
        if (_gender == null) {
            return StringPool.BLANK;
        } else {
            return _gender;
        }
    }

    @Override
    public void setGender(String gender) {
        _gender = gender;
    }

    @JSON
    @Override
    public String getMarital_status() {
        if (_marital_status == null) {
            return StringPool.BLANK;
        } else {
            return _marital_status;
        }
    }

    @Override
    public void setMarital_status(String marital_status) {
        _marital_status = marital_status;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @JSON
    @Override
    public long getJobtitleId() {
        return _jobtitleId;
    }

    @Override
    public void setJobtitleId(long jobtitleId) {
        _jobtitleId = jobtitleId;
    }

    @JSON
    @Override
    public Date getJoined_date() {
        return _joined_date;
    }

    @Override
    public void setJoined_date(Date joined_date) {
        _joined_date = joined_date;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Employee.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Employee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Employee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeImpl employeeImpl = new EmployeeImpl();

        employeeImpl.setEmployeeId(getEmployeeId());
        employeeImpl.setGroupId(getGroupId());
        employeeImpl.setCompanyId(getCompanyId());
        employeeImpl.setUserId(getUserId());
        employeeImpl.setUserName(getUserName());
        employeeImpl.setCreateDate(getCreateDate());
        employeeImpl.setModifiedDate(getModifiedDate());
        employeeImpl.setEmp_code(getEmp_code());
        employeeImpl.setFirstname(getFirstname());
        employeeImpl.setMiddle_name(getMiddle_name());
        employeeImpl.setLastname(getLastname());
        employeeImpl.setEmail(getEmail());
        employeeImpl.setNickname(getNickname());
        employeeImpl.setBirthday(getBirthday());
        employeeImpl.setGender(getGender());
        employeeImpl.setMarital_status(getMarital_status());
        employeeImpl.setStatus(getStatus());
        employeeImpl.setJobtitleId(getJobtitleId());
        employeeImpl.setJoined_date(getJoined_date());

        employeeImpl.resetOriginalValues();

        return employeeImpl;
    }

    @Override
    public int compareTo(Employee employee) {
        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Employee)) {
            return false;
        }

        Employee employee = (Employee) obj;

        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Employee> toCacheModel() {
        EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

        employeeCacheModel.employeeId = getEmployeeId();

        employeeCacheModel.groupId = getGroupId();

        employeeCacheModel.companyId = getCompanyId();

        employeeCacheModel.userId = getUserId();

        employeeCacheModel.userName = getUserName();

        String userName = employeeCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            employeeCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            employeeCacheModel.createDate = createDate.getTime();
        } else {
            employeeCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            employeeCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            employeeCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        employeeCacheModel.emp_code = getEmp_code();

        String emp_code = employeeCacheModel.emp_code;

        if ((emp_code != null) && (emp_code.length() == 0)) {
            employeeCacheModel.emp_code = null;
        }

        employeeCacheModel.firstname = getFirstname();

        String firstname = employeeCacheModel.firstname;

        if ((firstname != null) && (firstname.length() == 0)) {
            employeeCacheModel.firstname = null;
        }

        employeeCacheModel.middle_name = getMiddle_name();

        String middle_name = employeeCacheModel.middle_name;

        if ((middle_name != null) && (middle_name.length() == 0)) {
            employeeCacheModel.middle_name = null;
        }

        employeeCacheModel.lastname = getLastname();

        String lastname = employeeCacheModel.lastname;

        if ((lastname != null) && (lastname.length() == 0)) {
            employeeCacheModel.lastname = null;
        }

        employeeCacheModel.email = getEmail();

        String email = employeeCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            employeeCacheModel.email = null;
        }

        employeeCacheModel.nickname = getNickname();

        String nickname = employeeCacheModel.nickname;

        if ((nickname != null) && (nickname.length() == 0)) {
            employeeCacheModel.nickname = null;
        }

        Date birthday = getBirthday();

        if (birthday != null) {
            employeeCacheModel.birthday = birthday.getTime();
        } else {
            employeeCacheModel.birthday = Long.MIN_VALUE;
        }

        employeeCacheModel.gender = getGender();

        String gender = employeeCacheModel.gender;

        if ((gender != null) && (gender.length() == 0)) {
            employeeCacheModel.gender = null;
        }

        employeeCacheModel.marital_status = getMarital_status();

        String marital_status = employeeCacheModel.marital_status;

        if ((marital_status != null) && (marital_status.length() == 0)) {
            employeeCacheModel.marital_status = null;
        }

        employeeCacheModel.status = getStatus();

        String status = employeeCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            employeeCacheModel.status = null;
        }

        employeeCacheModel.jobtitleId = getJobtitleId();

        Date joined_date = getJoined_date();

        if (joined_date != null) {
            employeeCacheModel.joined_date = joined_date.getTime();
        } else {
            employeeCacheModel.joined_date = Long.MIN_VALUE;
        }

        return employeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(39);

        sb.append("{employeeId=");
        sb.append(getEmployeeId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", emp_code=");
        sb.append(getEmp_code());
        sb.append(", firstname=");
        sb.append(getFirstname());
        sb.append(", middle_name=");
        sb.append(getMiddle_name());
        sb.append(", lastname=");
        sb.append(getLastname());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", nickname=");
        sb.append(getNickname());
        sb.append(", birthday=");
        sb.append(getBirthday());
        sb.append(", gender=");
        sb.append(getGender());
        sb.append(", marital_status=");
        sb.append(getMarital_status());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", jobtitleId=");
        sb.append(getJobtitleId());
        sb.append(", joined_date=");
        sb.append(getJoined_date());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(61);

        sb.append("<model><model-name>");
        sb.append("vn.com.ecopharma.hrm.model.Employee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>employeeId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emp_code</column-name><column-value><![CDATA[");
        sb.append(getEmp_code());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstname</column-name><column-value><![CDATA[");
        sb.append(getFirstname());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>middle_name</column-name><column-value><![CDATA[");
        sb.append(getMiddle_name());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastname</column-name><column-value><![CDATA[");
        sb.append(getLastname());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nickname</column-name><column-value><![CDATA[");
        sb.append(getNickname());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>birthday</column-name><column-value><![CDATA[");
        sb.append(getBirthday());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>gender</column-name><column-value><![CDATA[");
        sb.append(getGender());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marital_status</column-name><column-value><![CDATA[");
        sb.append(getMarital_status());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>jobtitleId</column-name><column-value><![CDATA[");
        sb.append(getJobtitleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>joined_date</column-name><column-value><![CDATA[");
        sb.append(getJoined_date());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
