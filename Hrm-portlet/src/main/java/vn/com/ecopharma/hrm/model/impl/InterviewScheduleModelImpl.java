package vn.com.ecopharma.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.com.ecopharma.hrm.model.InterviewSchedule;
import vn.com.ecopharma.hrm.model.InterviewScheduleModel;
import vn.com.ecopharma.hrm.model.InterviewScheduleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the InterviewSchedule service. Represents a row in the &quot;HRM_Recruitment_InterviewSchedule&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.model.InterviewScheduleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InterviewScheduleImpl}.
 * </p>
 *
 * @author tvt
 * @see InterviewScheduleImpl
 * @see vn.com.ecopharma.hrm.model.InterviewSchedule
 * @see vn.com.ecopharma.hrm.model.InterviewScheduleModel
 * @generated
 */
@JSON(strict = true)
public class InterviewScheduleModelImpl extends BaseModelImpl<InterviewSchedule>
    implements InterviewScheduleModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a interview schedule model instance should use the {@link vn.com.ecopharma.hrm.model.InterviewSchedule} interface instead.
     */
    public static final String TABLE_NAME = "HRM_Recruitment_InterviewSchedule";
    public static final Object[][] TABLE_COLUMNS = {
            { "interviewScheduleId", Types.BIGINT },
            { "vacancyCandidateId", Types.BIGINT },
            { "interviewId", Types.BIGINT },
            { "interviewDate", Types.TIMESTAMP },
            { "interviewTime", Types.VARCHAR },
            { "note", Types.VARCHAR },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table HRM_Recruitment_InterviewSchedule (interviewScheduleId LONG not null primary key,vacancyCandidateId LONG,interviewId LONG,interviewDate DATE null,interviewTime VARCHAR(75) null,note VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table HRM_Recruitment_InterviewSchedule";
    public static final String ORDER_BY_JPQL = " ORDER BY interviewSchedule.interviewScheduleId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY HRM_Recruitment_InterviewSchedule.interviewScheduleId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.vn.com.ecopharma.hrm.model.InterviewSchedule"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.vn.com.ecopharma.hrm.model.InterviewSchedule"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.vn.com.ecopharma.hrm.model.InterviewSchedule"));
    private static ClassLoader _classLoader = InterviewSchedule.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            InterviewSchedule.class
        };
    private long _interviewScheduleId;
    private long _vacancyCandidateId;
    private long _interviewId;
    private Date _interviewDate;
    private String _interviewTime;
    private String _note;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private InterviewSchedule _escapedModel;

    public InterviewScheduleModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static InterviewSchedule toModel(InterviewScheduleSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        InterviewSchedule model = new InterviewScheduleImpl();

        model.setInterviewScheduleId(soapModel.getInterviewScheduleId());
        model.setVacancyCandidateId(soapModel.getVacancyCandidateId());
        model.setInterviewId(soapModel.getInterviewId());
        model.setInterviewDate(soapModel.getInterviewDate());
        model.setInterviewTime(soapModel.getInterviewTime());
        model.setNote(soapModel.getNote());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<InterviewSchedule> toModels(
        InterviewScheduleSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<InterviewSchedule> models = new ArrayList<InterviewSchedule>(soapModels.length);

        for (InterviewScheduleSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _interviewScheduleId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setInterviewScheduleId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _interviewScheduleId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return InterviewSchedule.class;
    }

    @Override
    public String getModelClassName() {
        return InterviewSchedule.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("interviewScheduleId", getInterviewScheduleId());
        attributes.put("vacancyCandidateId", getVacancyCandidateId());
        attributes.put("interviewId", getInterviewId());
        attributes.put("interviewDate", getInterviewDate());
        attributes.put("interviewTime", getInterviewTime());
        attributes.put("note", getNote());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long interviewScheduleId = (Long) attributes.get("interviewScheduleId");

        if (interviewScheduleId != null) {
            setInterviewScheduleId(interviewScheduleId);
        }

        Long vacancyCandidateId = (Long) attributes.get("vacancyCandidateId");

        if (vacancyCandidateId != null) {
            setVacancyCandidateId(vacancyCandidateId);
        }

        Long interviewId = (Long) attributes.get("interviewId");

        if (interviewId != null) {
            setInterviewId(interviewId);
        }

        Date interviewDate = (Date) attributes.get("interviewDate");

        if (interviewDate != null) {
            setInterviewDate(interviewDate);
        }

        String interviewTime = (String) attributes.get("interviewTime");

        if (interviewTime != null) {
            setInterviewTime(interviewTime);
        }

        String note = (String) attributes.get("note");

        if (note != null) {
            setNote(note);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @JSON
    @Override
    public long getInterviewScheduleId() {
        return _interviewScheduleId;
    }

    @Override
    public void setInterviewScheduleId(long interviewScheduleId) {
        _interviewScheduleId = interviewScheduleId;
    }

    @JSON
    @Override
    public long getVacancyCandidateId() {
        return _vacancyCandidateId;
    }

    @Override
    public void setVacancyCandidateId(long vacancyCandidateId) {
        _vacancyCandidateId = vacancyCandidateId;
    }

    @JSON
    @Override
    public long getInterviewId() {
        return _interviewId;
    }

    @Override
    public void setInterviewId(long interviewId) {
        _interviewId = interviewId;
    }

    @JSON
    @Override
    public Date getInterviewDate() {
        return _interviewDate;
    }

    @Override
    public void setInterviewDate(Date interviewDate) {
        _interviewDate = interviewDate;
    }

    @JSON
    @Override
    public String getInterviewTime() {
        if (_interviewTime == null) {
            return StringPool.BLANK;
        } else {
            return _interviewTime;
        }
    }

    @Override
    public void setInterviewTime(String interviewTime) {
        _interviewTime = interviewTime;
    }

    @JSON
    @Override
    public String getNote() {
        if (_note == null) {
            return StringPool.BLANK;
        } else {
            return _note;
        }
    }

    @Override
    public void setNote(String note) {
        _note = note;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            InterviewSchedule.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public InterviewSchedule toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (InterviewSchedule) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        InterviewScheduleImpl interviewScheduleImpl = new InterviewScheduleImpl();

        interviewScheduleImpl.setInterviewScheduleId(getInterviewScheduleId());
        interviewScheduleImpl.setVacancyCandidateId(getVacancyCandidateId());
        interviewScheduleImpl.setInterviewId(getInterviewId());
        interviewScheduleImpl.setInterviewDate(getInterviewDate());
        interviewScheduleImpl.setInterviewTime(getInterviewTime());
        interviewScheduleImpl.setNote(getNote());
        interviewScheduleImpl.setGroupId(getGroupId());
        interviewScheduleImpl.setCompanyId(getCompanyId());
        interviewScheduleImpl.setUserId(getUserId());
        interviewScheduleImpl.setCreateDate(getCreateDate());
        interviewScheduleImpl.setModifiedDate(getModifiedDate());

        interviewScheduleImpl.resetOriginalValues();

        return interviewScheduleImpl;
    }

    @Override
    public int compareTo(InterviewSchedule interviewSchedule) {
        long primaryKey = interviewSchedule.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof InterviewSchedule)) {
            return false;
        }

        InterviewSchedule interviewSchedule = (InterviewSchedule) obj;

        long primaryKey = interviewSchedule.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<InterviewSchedule> toCacheModel() {
        InterviewScheduleCacheModel interviewScheduleCacheModel = new InterviewScheduleCacheModel();

        interviewScheduleCacheModel.interviewScheduleId = getInterviewScheduleId();

        interviewScheduleCacheModel.vacancyCandidateId = getVacancyCandidateId();

        interviewScheduleCacheModel.interviewId = getInterviewId();

        Date interviewDate = getInterviewDate();

        if (interviewDate != null) {
            interviewScheduleCacheModel.interviewDate = interviewDate.getTime();
        } else {
            interviewScheduleCacheModel.interviewDate = Long.MIN_VALUE;
        }

        interviewScheduleCacheModel.interviewTime = getInterviewTime();

        String interviewTime = interviewScheduleCacheModel.interviewTime;

        if ((interviewTime != null) && (interviewTime.length() == 0)) {
            interviewScheduleCacheModel.interviewTime = null;
        }

        interviewScheduleCacheModel.note = getNote();

        String note = interviewScheduleCacheModel.note;

        if ((note != null) && (note.length() == 0)) {
            interviewScheduleCacheModel.note = null;
        }

        interviewScheduleCacheModel.groupId = getGroupId();

        interviewScheduleCacheModel.companyId = getCompanyId();

        interviewScheduleCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            interviewScheduleCacheModel.createDate = createDate.getTime();
        } else {
            interviewScheduleCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            interviewScheduleCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            interviewScheduleCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return interviewScheduleCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(23);

        sb.append("{interviewScheduleId=");
        sb.append(getInterviewScheduleId());
        sb.append(", vacancyCandidateId=");
        sb.append(getVacancyCandidateId());
        sb.append(", interviewId=");
        sb.append(getInterviewId());
        sb.append(", interviewDate=");
        sb.append(getInterviewDate());
        sb.append(", interviewTime=");
        sb.append(getInterviewTime());
        sb.append(", note=");
        sb.append(getNote());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(37);

        sb.append("<model><model-name>");
        sb.append("vn.com.ecopharma.hrm.model.InterviewSchedule");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>interviewScheduleId</column-name><column-value><![CDATA[");
        sb.append(getInterviewScheduleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>vacancyCandidateId</column-name><column-value><![CDATA[");
        sb.append(getVacancyCandidateId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>interviewId</column-name><column-value><![CDATA[");
        sb.append(getInterviewId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>interviewDate</column-name><column-value><![CDATA[");
        sb.append(getInterviewDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>interviewTime</column-name><column-value><![CDATA[");
        sb.append(getInterviewTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>note</column-name><column-value><![CDATA[");
        sb.append(getNote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
