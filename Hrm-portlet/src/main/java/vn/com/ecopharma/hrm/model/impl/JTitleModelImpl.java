package vn.com.ecopharma.hrm.model.impl;

import com.liferay.portal.NoSuchModelException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.trash.TrashHandler;
import com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.ContainerModel;
import com.liferay.portal.model.TrashedModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import com.liferay.portlet.trash.model.TrashEntry;
import com.liferay.portlet.trash.service.TrashEntryLocalServiceUtil;

import vn.com.ecopharma.hrm.model.JTitle;
import vn.com.ecopharma.hrm.model.JTitleModel;
import vn.com.ecopharma.hrm.model.JTitleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the JTitle service. Represents a row in the &quot;HRM_JTitle&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.model.JTitleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JTitleImpl}.
 * </p>
 *
 * @author tvt
 * @see JTitleImpl
 * @see vn.com.ecopharma.hrm.model.JTitle
 * @see vn.com.ecopharma.hrm.model.JTitleModel
 * @generated
 */
@JSON(strict = true)
public class JTitleModelImpl extends BaseModelImpl<JTitle>
    implements JTitleModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a j title model instance should use the {@link vn.com.ecopharma.hrm.model.JTitle} interface instead.
     */
    public static final String TABLE_NAME = "HRM_JTitle";
    public static final Object[][] TABLE_COLUMNS = {
            { "jobtitleId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "note", Types.VARCHAR },
            { "isDeleted", Types.BOOLEAN },
            { "user_id", Types.BIGINT },
            { "group_id", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table HRM_JTitle (jobtitleId LONG not null primary key,title VARCHAR(75) null,description VARCHAR(75) null,note VARCHAR(75) null,isDeleted BOOLEAN,user_id LONG,group_id LONG)";
    public static final String TABLE_SQL_DROP = "drop table HRM_JTitle";
    public static final String ORDER_BY_JPQL = " ORDER BY jTitle.jobtitleId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY HRM_JTitle.jobtitleId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.vn.com.ecopharma.hrm.model.JTitle"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.vn.com.ecopharma.hrm.model.JTitle"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.vn.com.ecopharma.hrm.model.JTitle"));
    private static ClassLoader _classLoader = JTitle.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { JTitle.class };
    private long _jobtitleId;
    private String _title;
    private String _description;
    private String _note;
    private boolean _isDeleted;
    private long _user_id;
    private long _group_id;
    private JTitle _escapedModel;

    public JTitleModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static JTitle toModel(JTitleSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        JTitle model = new JTitleImpl();

        model.setJobtitleId(soapModel.getJobtitleId());
        model.setTitle(soapModel.getTitle());
        model.setDescription(soapModel.getDescription());
        model.setNote(soapModel.getNote());
        model.setIsDeleted(soapModel.getIsDeleted());
        model.setUser_id(soapModel.getUser_id());
        model.setGroup_id(soapModel.getGroup_id());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<JTitle> toModels(JTitleSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<JTitle> models = new ArrayList<JTitle>(soapModels.length);

        for (JTitleSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _jobtitleId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setJobtitleId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _jobtitleId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return JTitle.class;
    }

    @Override
    public String getModelClassName() {
        return JTitle.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("jobtitleId", getJobtitleId());
        attributes.put("title", getTitle());
        attributes.put("description", getDescription());
        attributes.put("note", getNote());
        attributes.put("isDeleted", getIsDeleted());
        attributes.put("user_id", getUser_id());
        attributes.put("group_id", getGroup_id());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long jobtitleId = (Long) attributes.get("jobtitleId");

        if (jobtitleId != null) {
            setJobtitleId(jobtitleId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String note = (String) attributes.get("note");

        if (note != null) {
            setNote(note);
        }

        Boolean isDeleted = (Boolean) attributes.get("isDeleted");

        if (isDeleted != null) {
            setIsDeleted(isDeleted);
        }

        Long user_id = (Long) attributes.get("user_id");

        if (user_id != null) {
            setUser_id(user_id);
        }

        Long group_id = (Long) attributes.get("group_id");

        if (group_id != null) {
            setGroup_id(group_id);
        }
    }

    @JSON
    @Override
    public long getJobtitleId() {
        return _jobtitleId;
    }

    @Override
    public void setJobtitleId(long jobtitleId) {
        _jobtitleId = jobtitleId;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getNote() {
        if (_note == null) {
            return StringPool.BLANK;
        } else {
            return _note;
        }
    }

    @Override
    public void setNote(String note) {
        _note = note;
    }

    @JSON
    @Override
    public boolean getIsDeleted() {
        return _isDeleted;
    }

    @Override
    public boolean isIsDeleted() {
        return _isDeleted;
    }

    @Override
    public void setIsDeleted(boolean isDeleted) {
        _isDeleted = isDeleted;
    }

    @JSON
    @Override
    public long getUser_id() {
        return _user_id;
    }

    @Override
    public void setUser_id(long user_id) {
        _user_id = user_id;
    }

    @JSON
    @Override
    public long getGroup_id() {
        return _group_id;
    }

    @Override
    public void setGroup_id(long group_id) {
        _group_id = group_id;
    }

    @Override
    public int getStatus() {
        return 0;
    }

    @Override
    public TrashEntry getTrashEntry() throws PortalException, SystemException {
        if (!isInTrash()) {
            return null;
        }

        TrashEntry trashEntry = TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
                getTrashEntryClassPK());

        if (trashEntry != null) {
            return trashEntry;
        }

        TrashHandler trashHandler = getTrashHandler();

        if (!Validator.isNull(trashHandler.getContainerModelClassName())) {
            ContainerModel containerModel = null;

            try {
                containerModel = trashHandler.getParentContainerModel(this);
            } catch (NoSuchModelException nsme) {
                return null;
            }

            while (containerModel != null) {
                if (containerModel instanceof TrashedModel) {
                    TrashedModel trashedModel = (TrashedModel) containerModel;

                    return trashedModel.getTrashEntry();
                }

                trashHandler = TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName());

                if (trashHandler == null) {
                    return null;
                }

                containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
            }
        }

        return null;
    }

    @Override
    public long getTrashEntryClassPK() {
        return getPrimaryKey();
    }

    @Override
    public TrashHandler getTrashHandler() {
        return TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
    }

    @Override
    public boolean isInTrash() {
        if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isInTrashContainer() {
        TrashHandler trashHandler = getTrashHandler();

        if ((trashHandler == null) ||
                Validator.isNull(trashHandler.getContainerModelClassName())) {
            return false;
        }

        try {
            ContainerModel containerModel = trashHandler.getParentContainerModel(this);

            if (containerModel == null) {
                return false;
            }

            if (containerModel instanceof TrashedModel) {
                return ((TrashedModel) containerModel).isInTrash();
            }
        } catch (Exception e) {
        }

        return false;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            JTitle.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public JTitle toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (JTitle) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        JTitleImpl jTitleImpl = new JTitleImpl();

        jTitleImpl.setJobtitleId(getJobtitleId());
        jTitleImpl.setTitle(getTitle());
        jTitleImpl.setDescription(getDescription());
        jTitleImpl.setNote(getNote());
        jTitleImpl.setIsDeleted(getIsDeleted());
        jTitleImpl.setUser_id(getUser_id());
        jTitleImpl.setGroup_id(getGroup_id());

        jTitleImpl.resetOriginalValues();

        return jTitleImpl;
    }

    @Override
    public int compareTo(JTitle jTitle) {
        long primaryKey = jTitle.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof JTitle)) {
            return false;
        }

        JTitle jTitle = (JTitle) obj;

        long primaryKey = jTitle.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<JTitle> toCacheModel() {
        JTitleCacheModel jTitleCacheModel = new JTitleCacheModel();

        jTitleCacheModel.jobtitleId = getJobtitleId();

        jTitleCacheModel.title = getTitle();

        String title = jTitleCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            jTitleCacheModel.title = null;
        }

        jTitleCacheModel.description = getDescription();

        String description = jTitleCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            jTitleCacheModel.description = null;
        }

        jTitleCacheModel.note = getNote();

        String note = jTitleCacheModel.note;

        if ((note != null) && (note.length() == 0)) {
            jTitleCacheModel.note = null;
        }

        jTitleCacheModel.isDeleted = getIsDeleted();

        jTitleCacheModel.user_id = getUser_id();

        jTitleCacheModel.group_id = getGroup_id();

        return jTitleCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{jobtitleId=");
        sb.append(getJobtitleId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", note=");
        sb.append(getNote());
        sb.append(", isDeleted=");
        sb.append(getIsDeleted());
        sb.append(", user_id=");
        sb.append(getUser_id());
        sb.append(", group_id=");
        sb.append(getGroup_id());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("vn.com.ecopharma.hrm.model.JTitle");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>jobtitleId</column-name><column-value><![CDATA[");
        sb.append(getJobtitleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>note</column-name><column-value><![CDATA[");
        sb.append(getNote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isDeleted</column-name><column-value><![CDATA[");
        sb.append(getIsDeleted());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>user_id</column-name><column-value><![CDATA[");
        sb.append(getUser_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>group_id</column-name><column-value><![CDATA[");
        sb.append(getGroup_id());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
